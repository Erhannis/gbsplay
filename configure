#!/bin/sh
# $Id: configure,v 1.52 2004/04/08 15:50:04 mitch Exp $
#
# generate config.mk for gbsplay Makefile
#
# 2003-2004 (C) by Christian Garbs <mitch@cgarbs.de>
#                  Tobias Diedrich <ranma@gmx.at>
# Licensed under GNU GPL.

## initialize variables

EXTRA_ALL=
EXTRA_CFLAGS="$CFLAGS"
EXTRA_INSTALL=
EXTRA_LDFLAGS=
EXTRA_SRCS=
EXTRA_UNINSTALL=
XMMS_INPUT_PLUGIN_DIR=
CC="${CC-gcc}" # use gcc by default

package=gbsplay
prefix=/usr/local

## sane echo is in /usr/ucb on Solaris
if [ -d /usr/ucb ]; then
    PATH="/usr/ucb:$PATH"
fi

## set version number
VERSION=0.0.5

##### begin of subroutines

## die with error
die ()
{
    rm -rf "$TEMPDIR"
    exit 1
}

## check for presence of include files
check_include()
{
    include="$1"
    name="`echo $include | sed -e 's@[/\.]@_@g'`"
    eval "value=\$have_$name"
    test -z $value || return

    cc_check "checking for $include" have_$name <<EOF
#include <$include>
int main(char argc, char **argv) {
    return 0;
}
EOF
}

## generalized 'does it compile' check
cc_check()
{
    INFILE="$TEMPDIR/cc.c"
    OUTFILE="$TEMPDIR/cc"
    name="$1"
    varname="$2"
    flags="$3"
    okmsg="${4-ok}"
    errmsg="${5-not found}"

    test "$name" && echo -n "$name:  "

    cat > "$INFILE"
    $CC -o "$OUTFILE" "$INFILE" $flags
    RESULT=$?
    if [ $RESULT -eq 0 ]; then
	test "$name" && echo "$okmsg"
	test "$varname" && eval "$varname=yes"
	return 0
    else
	test "$name" && echo "$errmsg"
	test "$varname" && eval "$varname=no"
	return 1
    fi
}

need_include() {
    check_include "$1"
    if [ $? -ne 0 ]; then
	echo "Could not find $1, which is needed for compilation."
	die
    fi
}

## config.h helper
have_x() {
    localvar="have_`echo $1 | tr A-Z a-z`"
    eval "result=\$$localvar"
    if [ "$result" = "yes" ]; then
	echo "#define HAVE_$1 1"
    else
	echo "/* #undef HAVE_$1 */"
    fi
}

plugout_x() {
    localvar="use_`echo $1 | tr A-Z a-z`"
    eval "result=\$$localvar"
    if [ "$result" = "yes" ]; then
	echo "#define PLUGOUT_$1 1"
    else
	echo "/* #undef PLUGOUT_$1 */"
    fi
}

use_x() {
    localvar="use_`echo $1 | tr A-Z a-z`"
    eval "result=\$$localvar"
    if [ "$result" = "yes" ]; then
	echo "#define USE_$1 1"
    else
	echo "/* #undef USE_$1 */"
    fi
}

## external which is unreliable
which()
{
    IFS_SAVE="$IFS"
    IFS=:
    PROGRAM="$1"
    for ELEMENT in $PATH; do
	if [ -z "$ELEMENT" ]; then
	    ELEMENT=.
	fi
	if [ -f "$ELEMENT/$PROGRAM" ] && [ -x "$ELEMENT/$PROGRAM" ]; then
	    IFS="$IFS_SAVE"
	    echo "$ELEMENT/$PROGRAM"
	    return 0
	fi
    done
    IFS="$IFS_SAVE"
    return 1
}

# set variable to default value if empty
# really the same as $var="${var-$default}"
setdefault()
{
	eval "value=\$$1"
	if [ -z $value ]; then
		eval "$1=$2"
	fi
}

# check if $1 is a known feature
isknown()
{
	for i in $OPTS; do
		if [ "$i" = "$1" ]; then
			return 0
		fi
	done

	if [ "${1#use_}" != "$1" ]; then
		echo "unknown feature '${1#use_}'"
	elif [ "${1#build_}" != "$1" ]; then
		echo "unknown module '${1#build_}'"
	else
		echo "unknown option '$2'"
	fi
	echo
	return 1
}

# list enabled $1 (modules, features)
# of type $2 (build, use)
printoptional()
{
	echo -n "${3-optional} $1:"
	for i in $OPTS; do
		eval "val=\$$i"
		if [ "${i#${2}_}" != "$i" ]; then
			if [ "$val" = "yes" ]; then
				echo -n " +${i#${2}_}"
			elif [ "$val" = "no" ]; then
				echo -n " -${i#${2}_}"
			fi
		fi
	done
	echo
}

# parse option $1
parseoption()
{
	case $1 in
		--prefix=*)
		prefix="${1#--prefix=}"
		;;
		--exec-prefix=*)
		exec_prefix="${1#--exec-prefix=}"
		;;
		--bindir=*)
		bindir="${1#--bindir=}"
		;;
		--mandir=*)
		mandir="${1#--mandir=}"
		;;
		--docdir=*)
		docdir="${1#--docdir=}"
		;;
		--localedir=*)
		localedir="${1#--localedir=}"
		;;
		--have-*)
		eval "have_${1#--have-}=yes"
		isknown have_${1#--have-} $1 || usage 1
		;;
		--donthave-*)
		eval "have_${1#--donthave-}=no"
		isknown have_${1#--donthave-} $1 || usage 1
		;;
		--enable-*)
		eval "use_${1#--enable-}=yes"
		isknown use_${1#--enable-} || usage 1
		;;
		--disable-*)
		eval "use_${1#--disable-}=no"
		isknown use_${1#--disable-} || usage 1
		;;
		--with-*)
		eval "build_${1#--with-}=yes"
		isknown build_${1#--with-} || usage 1
		;;
		--without-*)
		eval "build_${1#--without-}=no"
		isknown build_${1#--without-} || usage 1
		;;
		--help)
		usage 0
		;;
		*)
		echo "unknown option '$1'"
		echo
		usage 1
		;;
	esac
}
##### end of subroutines

## enable logging of errors

ERRORLOG=config.err
exec 2> $ERRORLOG

## find a path for tmp directory

TMPPATH="/tmp"
if [ "$TMPDIR" ]; then
    TMPPATH="$TMPDIR"
fi

if [ ! -d "$TMPPATH" ]; then
    TMPPATH="."
fi

## generate tmp directory

BASENAME="`basename $0`"
if [ "`which mktemp`" != "" ]; then
    TEMPDIR="`mktemp -d "$TMPPATH/$BASENAME.XXXXXXXXXX"`"
else
    TEMPDIR="$TMPPATH/$BASENAME.$$"
    mkdir "$TEMPDIR"
fi
if [ $? -ne 0 ]; then
    echo "can't create temporary directory at <$TMPPATH>!"
    exit 1;
fi

usage()
{
	cat<<EOF
Usage: $0 [OPTION]...

Configuration:
  --help                 display this help and exit

Installation directories:
  --prefix=PREFIX        install architecture-independent files in PREFIX
                         [/usr/local]
  --exec-prefix=EPREFIX  install architecture-dependent files in EPREFIX
                         [PREFIX]
  --bindir=BINDIR        install binaries in BINDIR
                         [EPREFIX/bin]
  --libdir=BINDIR        install binaries in LIBDIR
                         [EPREFIX/lib]
  --mandir=MANDIR        install manpages in MANDIR
                         [PREFIX/man]
  --docdir=DOCDIR        install documentation in DOCDIR
                         [PREFIX/share/doc/$package]

Optional Features:
  --disable-i18n         omit libintl support
  --enable-debug         build with debug code
  --enable-sharedlibgbs  build libgbs as a shared library

Optional Packages:
  --without-xmmsplugin   do not build xmms input plugin

Output Plugins:
  --disable-devdsp       omit /dev/dsp sound output plugin
  --disable-stdout       omit stdout file writer plugin
  --enable-nas           build NAS sound output plugin
EOF
	exit $1
}

OPTS="build_xmmsplugin use_i18n use_sharedlibgbs use_regparm use_debug use_stdout use_devdsp use_nas"

## load user config
if [ -f config.conf ]; then
	echo -n "loading config.conf... "
	while read line; do
		parseoption $line
	done < config.conf
	echo ok
fi

while [ $1 ]; do
	parseoption $1
	shift
done

## check for C compiler

echo -n "checking for working compiler:  "
INFILE="$TEMPDIR/cc.c"
OUTFILE="$TEMPDIR/cc"

cat > "$INFILE" <<EOF
int main(char argc, char **argv) {
    return 0;
}
EOF
$CC -o "$OUTFILE" "$INFILE"
RESULT=$?
if [ $RESULT -eq 0 ]; then
    if [ -s "$OUTFILE" ]; then
	"$OUTFILE"
	if [ $? -eq 0 ]; then
	    echo "ok"
	else
	    echo "can't execute generated code"
	    die
	fi
    else
	echo "no code generated"
	die
    fi
else
    echo "error executing $CC"
    die
fi

if [ "$use_regparm" != "no" ]; then
    cc_check "checking for regparm support" use_regparm <<EOF
void __attribute__((regparm(3))) foo(void)
{
}
int main(int argc, char **argv)
{
	foo();
	return 0;
}
EOF
fi

# Check CVS time

if [ -f CVS/Entries ]; then
    cc_check <<EOF
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <time.h>

int main(int argc, char **argv)
{
	char date[200];
	struct stat st;

	lstat("CVS/Entries", &st);
	strftime(date, sizeof(date), "%Y%m%d", gmtime(&st.st_mtime));
	puts(date);

	return 0;
}
EOF
	if [ $? -eq 0 ]; then
		VERSION=${VERSION}+cvs`$TEMPDIR/cc`
	fi
fi

## check for various headers

need_include inttypes.h

if [ "$use_devdsp" != no ]; then
    check_include sys/soundcard.h
    use_devdsp=$have_sys_soundcard_h
fi

if [ "$use_nas" != no ]; then
    check_include audio/audiolib.h
    use_nas=$have_audio_audiolib_h
fi

if [ "$use_i18n" != no ]; then
    check_include locale.h
    check_include libintl.h

    ## check for gettext

    echo -n "checking for gettext tools:  "
    have_xgettext=yes
    for i in xgettext msgmerge msgfmt msgen; do
        if [ "`which $i`" = "" ]; then
	    test "$have_xgettext" = "yes" && echo "not ok"
	    have_xgettext=no
	    echo "$i is missing"
        fi
    done
    test "$have_xgettext" = "yes" && echo "ok"

    use_i18n=no
    if [ "$have_locale_h" = "yes" -a "$have_libintl_h" = "yes" ]; then
        use_i18n=yes
    fi
fi

if [ "$use_i18n" = "yes" ]; then
    cc_check "do we need -lintl" need_lintl "-lintl" yes no <<EOF
#include <libintl.h>
int main(int argc, char **argv)
{
	bindtextdomain("foo", "bar");
	return 0;
}
EOF
    if [ $? -eq 0 ]; then
	EXTRA_LDFLAGS="$EXTRA_LDFLAGS -lintl"
    fi
fi

if [ "$build_xmmsplugin" != "no" ]; then
    ## check for pthread

    check_include pthread.h
    if [ "$have_pthread_h" = "yes" ]; then
        cc_check "checking for Linux flavoured pthread" have_pthread "-lpthread" found no <<EOF
#include <pthread.h>
int main(int argc, char **argv)
{
    pthread_self();
    return 0;
}
EOF
        if [ $? -eq 0 ]; then
	    PTHREAD="-lpthread"
        else
	    cc_check "checking FreeBSD-flavoured pthread" have_pthread "-pthread" found no <<EOF
#include <pthread.h>
int main(int argc, char **argv)
{
    pthread_self();
    return 0;
}
EOF
	    if [ $? -eq 0 ]; then
	        PTHREAD="-pthread"
	    else
	        echo "no known pthread implementation found!"
	    fi
        fi
    fi

    ## check for glib development files

    echo -n "checking for glib-dev:  "
    CONFIG=`which glib-config`
    if [ $? -eq 0 ]; then
        GLIB_CFLAGS=`glib-config --cflags`
        if [ $? -eq 0 ]; then
	    echo "ok"
        else
	    echo "error running glib-config --cflags!"
        fi
    else
        echo "glib-config not found!"
    fi

    ## check for xmms development files

    echo -n "checking for xmms-dev:  "
    CONFIG=`which xmms-config`
    if [ $? -eq 0 ]; then
        XMMS_CFLAGS=`xmms-config --cflags` 
        if [ $? -eq 0 ]; then
	    XMMS_INPUT_PLUGIN_DIR=`xmms-config --input-plugin-dir`
	    if [ $? -eq 0 ]; then
	        echo "ok"
	    else
	        echo "error running xmms-config --input-plugin-dir!"
	    fi
        else
	    echo "error running xmms-config --cflags!"
        fi
    else
        echo "xmms-config not found!"
    fi
fi

## check for cygwin environment

echo -n "checking for Cygwin environment:  "
if [ "`uname -o`" = "Cygwin" ]; then
    cygwin_build=yes
    echo "ok"
else
    cygwin_build=no
    echo "no"
fi

## can XMMS be built?

if [ "$build_xmmsplugin" != "no" -a "$GLIB_CFLAGS" -a "$XMMS_CFLAGS" -a "XMMS_INPUT_PLUGIN_DIR" -a "$PTHREAD" ]; then
    EXTRA_CFLAGS="$EXTRA_CFLAGS $GLIB_CFLAGS $XMMS_CFLAGS"
    EXTRA_INSTALL="$EXTRA_INSTALL install-gbsxmms.so"
    EXTRA_UNINSTALL="$EXTRA_UNINSTALL uninstall-gbsxmms.so"
    build_xmmsplugin=yes
else
    build_xmmsplugin=no
fi

## set variables we have no test for to default values if not set

setdefault exec_prefix "$prefix"
setdefault bindir      "$exec_prefix/bin"
setdefault libdir      "$exec_prefix/lib"
setdefault mandir      "$prefix/man"
setdefault man1dir     "$mandir/man1"
setdefault man5dir     "$mandir/man5"
setdefault docdir      "$prefix/share/doc/$package"
setdefault localedir   "$prefix/share/locale"

setdefault use_sharedlibgbs no
setdefault use_debug no

setdefault use_stdout yes

printoptional modules build
printoptional features use

## architecture dependent CFLAGS

ARCH=`uname -m`
case $ARCH in
	i?86)
	EXTRA_CFLAGS="$EXTRA_CFLAGS -Os -pipe -march=$ARCH"
	;;
	*)
	EXTRA_CFLAGS="$EXTRA_CFLAGS -Os -pipe"
	;;
esac

if [ "$use_debug" = "yes" ]; then
	EXTRA_CFLAGS="$EXTRA_CFLAGS -g3"
else
	EXTRA_CFLAGS="$EXTRA_CFLAGS -fomit-frame-pointer"
fi

echo "EXTRA_CFLAGS=$EXTRA_CFLAGS"

## write configuration

(
    echo EXTRA_ALL := $EXTRA_ALL
    echo EXTRA_CFLAGS := $EXTRA_CFLAGS
    echo EXTRA_INSTALL := $EXTRA_INSTALL
    echo EXTRA_LDFLAGS := $EXTRA_LDFLAGS
    echo EXTRA_SRCS := $EXTRA_SRCS
    echo EXTRA_UNINSTALL := $EXTRA_UNINSTALL
    echo PTHREAD := $PTHREAD
    echo XMMS_INPUT_PLUGIN_DIR := $XMMS_INPUT_PLUGIN_DIR
    echo VERSION := $VERSION
    echo prefix := $prefix
    echo exec_prefix := $exec_prefix
    echo bindir := $bindir
    echo libdir := $libdir
    echo mandir := $mandir
    echo man1dir := $man1dir
    echo man5dir := $man5dir
    echo docdir := $docdir
    echo localedir := $localedir
    echo CC := $CC
    echo build_xmmsplugin := $build_xmmsplugin
    echo have_xgettext := $have_xgettext
    echo plugout_devdsp := $use_devdsp
    echo plugout_nas := $use_nas
    echo plugout_stdout := $use_stdout
    echo use_i18n := $use_i18n
    echo use_sharedlibgbs := $use_sharedlibgbs
    echo cygwin_build := $cygwin_build
) > config.mk

(
    echo "#define GBS_VERSION \"$VERSION\""
    echo "#define LOCALE_PREFIX \"$localedir\""
    plugout_x DEVDSP
    plugout_x NAS
    plugout_x STDOUT
    use_x I18N
    use_x REGPARM
) > config.h

(
    echo "s/%%%VERSION%%%/$VERSION/g"
) > config.sed

## end

rm -rf "$TEMPDIR"
test -s $ERRORLOG || rm $ERRORLOG
