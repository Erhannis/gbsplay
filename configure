#!/bin/sh
# $Id: configure,v 1.33 2004/01/04 09:02:13 mitch Exp $
#
# generate config.mk for gbsplay Makefile
#
# 2003 (C) by Christian Garbs <mitch@cgarbs.de>
#             Tobias Diedrich <ranma@gmx.at>
# Licensed under GNU GPL.

## initialize variables

## Sane echo is in /usr/ucb on Solaris
if [ -d /usr/ucb ]; then
    PATH="/usr/ucb:$PATH"
fi

VERSION=0.0.4
if [ -f CVS/Entries ]; then
    VERSION=${VERSION}+cvs`date -r CVS/Entries +%Y%m%d`
fi

EXTRA_ALL=
EXTRA_CFLAGS=
EXTRA_INSTALL=
EXTRA_LDFLAGS=
EXTRA_SRCS=
EXTRA_UNINSTALL=
XMMS_INPUT_PLUGIN_DIR=

build_xmmsplugin=n

##### begin of subroutines

## die with error
die ()
{
    rm -rf "$TEMPDIR"
    exit 1
}

## check for presence of include files
check_include()
{
    include="$1"
    name="`echo $include | sed -e 's@[/\.]@_@g'`"

    cc_check "checking for $include" have_$name <<EOF
#include <$include>
int main(char argc, char **argv) {
    return 0;
}
EOF
}

## generalized 'does it compile' check
cc_check()
{
    INFILE="$TEMPDIR/cc.c"
    OUTFILE="$TEMPDIR/cc"
    name="$1"
    varname="$2"
    flags="$3"
    okmsg="${4-ok}"
    errmsg="${5-not found}"

    echo -n "$name:  "

    cat > "$INFILE"
    $CC -o "$OUTFILE" "$INFILE" $flags
    RESULT=$?
    if [ $RESULT -eq 0 ]; then
	echo "$okmsg"
	eval "$varname=yes"
	return 0
    else
	echo "$errmsg"
	eval "$varname=no"
	return 1
    fi
}

need_include() {
    check_include "$1"
    if [ $? -ne 0 ]; then
	echo "Could not find $1, which is needed for compilation."
	die
    fi
}

## config.h helper
have_x() {
    localvar="have_`echo $1 | tr A-Z a-z`"
    eval "result=\$$localvar"
    if [ "$result" = "yes" ]; then
	echo "#define HAVE_$1 1"
    else
	echo "/* #undef HAVE_$1 */"
    fi
}

## external which is unreliable
which()
{
    IFS_SAVE="$IFS"
    IFS=:
    PROGRAM="$1"
    for ELEMENT in $PATH; do
	if [ -z "$ELEMENT" ]; then
	    ELEMENT=.
	fi
	if [ -f "$ELEMENT/$PROGRAM" ] && [ -x "$ELEMENT/$PROGRAM" ]; then
	    IFS="$IFS_SAVE"
	    echo "$ELEMENT/$PROGRAM"
	    return 0
	fi
    done
    IFS="$IFS_SAVE"
    return 1
}

##### end of subroutines

## enable logging of errors

ERRORLOG=config.err
exec 2> $ERRORLOG

## find a path for tmp directory

TMPPATH="/tmp"
if [ "$TMPDIR" ]; then
    TMPPATH="$TMPDIR"
fi

if [ ! -d "$TMPPATH" ]; then
    TMPPATH="."
fi

## generate tmp directory

BASENAME="`basename $0`"
if [ "`which mktemp`" != "" ]; then
    TEMPDIR="`mktemp -d "$TMPPATH/$BASENAME.XXXXXXXXXX"`"
else
    TEMPDIR="$TMPPATH/$BASENAME.$$"
    mkdir "$TEMPDIR"
fi
if [ $? -ne 0 ]; then
    echo "can't create temporary directory at <$TMPPATH>!"
    exit 1;
fi

## check for C compiler

echo -n "checking for CC:  "
if [ $CC ]; then
    echo "ok"
else
    echo "nok"
    cat <<EOF
Environment variable CC is not set.
Please point it to a working C compiler.
You probably want to run 'make' instead of './configure'.
EOF
    die
fi

echo -n "checking for working compiler:  "
INFILE="$TEMPDIR/cc.c"
OUTFILE="$TEMPDIR/cc"

cat > "$INFILE" <<EOF
int main(char argc, char **argv) {
    return 0;
}
EOF
$CC -o "$OUTFILE" "$INFILE"
RESULT=$?
if [ $RESULT -eq 0 ]; then
    if [ -s "$OUTFILE" ]; then
	"$OUTFILE"
	if [ $? -eq 0 ]; then
	    echo "ok"
	else
	    echo "can't execute generated code"
	    die
	fi
    else
	echo "no code generated"
	die
    fi
else
    echo "error executing $CC"
    die
fi

## check for various headers

need_include inttypes.h
check_include sys/soundcard.h
check_include locale.h
check_include libintl.h

## check for pthread

check_include pthread.h
if [ "$have_pthread_h" = "yes" ]; then
    cc_check "checking for Linux flavoured pthread" have_pthread "-lpthread" found no <<EOF
#include <pthread.h>
int main(int argc, char **argv)
{
    pthread_self();
    return 0;
}
EOF
    if [ $? -eq 0 ]; then
	PTHREAD="-lpthread"
    else
	cc_check "checking FreeBSD-flavoured pthread" have_pthread "-pthread" found no <<EOF
#include <pthread.h>
int main(int argc, char **argv)
{
    pthread_self();
    return 0;
}
EOF
	if [ $? -eq 0 ]; then
	    PTHREAD="-pthread"
	else
	    echo "no known pthread implementation found!"
	fi
    fi
    
fi

## check for gettext

echo -n "checking for gettext tools:  "
have_xgettext=yes
for i in xgettext msgmerge msgfmt msgen; do
    if [ "`which $i`" = "" ]; then
	test "$have_xgettext" = "yes" && echo "not ok"
	have_xgettext=no
	echo "$i is missing"
    fi
done
test "$have_xgettext" = "yes" && echo "ok"

if [ "$have_locale_h" = "yes" -a "$have_libintl_h" = "yes" ]; then
    cc_check "do we need -lintl" need_lintl "-lintl" yes no <<EOF
#include <libintl.h>
int main(int argc, char **argv)
{
	bindtextdomain("foo", "bar");
	return 0;
}
EOF
    if [ $? -eq 0 ]; then
	EXTRA_LDFLAGS="$EXTRA_LDFLAGS -lintl"
    fi
fi

## check for glib development files

echo -n "checking for glib-dev:  "
CONFIG=`which glib-config`
if [ $? -eq 0 ]; then
    GLIB_CFLAGS=`glib-config --cflags`
    if [ $? -eq 0 ]; then
	echo "ok"
    else
	echo "error running glib-config --cflags!"
    fi
else
    echo "glib-config not found!"
fi

## check for xmms development files

echo -n "checking for xmms-dev:  "
CONFIG=`which xmms-config`
if [ $? -eq 0 ]; then
    XMMS_CFLAGS=`xmms-config --cflags` 
    if [ $? -eq 0 ]; then
	XMMS_INPUT_PLUGIN_DIR=`xmms-config --input-plugin-dir`
	if [ $? -eq 0 ]; then
	    echo "ok"
	else
	    echo "error running xmms-config --input-plugin-dir!"
	fi
    else
	echo "error running xmms-config --cflags!"
    fi
else
    echo "xmms-config not found!"
fi

## everything ok?

if [ "$GLIB_CFLAGS" -a "$XMMS_CFLAGS" -a "XMMS_INPUT_PLUGIN_DIR" -a "$PTHREAD" ]; then
    EXTRA_CFLAGS="$EXTRA_CFLAGS $GLIB_CFLAGS $XMMS_CFLAGS"
    EXTRA_INSTALL="$EXTRA_INSTALL install-gbsxmms.so"
    EXTRA_UNINSTALL="$EXTRA_UNINSTALL uninstall-gbsxmms.so"
    build_xmmsplugin=y
    echo "xmms support enabled."
else
    echo "no xmms support."
fi

## write configuration

(
    echo EXTRA_ALL := $EXTRA_ALL
    echo EXTRA_CFLAGS := $EXTRA_CFLAGS 
    echo EXTRA_INSTALL := $EXTRA_INSTALL
    echo EXTRA_LDFLAGS := $EXTRA_LDFLAGS
    echo EXTRA_SRCS := $EXTRA_SRCS
    echo EXTRA_UNINSTALL := $EXTRA_UNINSTALL
    echo PTHREAD := $PTHREAD
    echo XMMS_INPUT_PLUGIN_DIR := $XMMS_INPUT_PLUGIN_DIR
    echo VERSION := $VERSION
    echo build_xmmsplugin := $build_xmmsplugin
    echo have_xgettext := $have_xgettext
) > config.mk

(
    echo "#define GBS_VERSION \"$VERSION\""
    have_x SYS_SOUNDCARD_H
    have_x LOCALE_H
    have_x LIBINTL_H
) > config.h

(
    echo "s/%%%VERSION%%%/$VERSION/g"
) > config.sed

## end

rm -rf "$TEMPDIR"
test -s $ERRORLOG || rm $ERRORLOG
echo "end."
